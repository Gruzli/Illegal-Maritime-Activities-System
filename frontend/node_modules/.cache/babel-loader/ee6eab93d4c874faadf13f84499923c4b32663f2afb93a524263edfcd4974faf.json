{"ast":null,"code":"var _jsxFileName = \"C:\\\\Assignments\\\\Binus\\\\Software Engineering\\\\aol2\\\\Illegal-Maritime-Activities-System\\\\frontend\\\\src\\\\components\\\\MapGet.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, Polygon, CircleMarker, Popup } from 'react-leaflet';\nimport 'leaflet/dist/leaflet.css';\nimport JSZip from 'jszip';\nimport Papa from 'papaparse';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MapGet = () => {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [markers, setMarkers] = useState([]);\n  useEffect(() => {\n    fetch('/res/geometry.geojson').then(response => response.json()).then(data => setGeoJsonData(data));\n  }, []);\n  const renderPolygons = geometry => {\n    if (geometry.type === 'Polygon') {\n      return /*#__PURE__*/_jsxDEV(Polygon, {\n        positions: geometry.coordinates.map(ring => ring.map(coord => [coord[1], coord[0]])),\n        color: randomColor(),\n        weight: 4\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 9\n      }, this);\n    } else if (geometry.type === 'MultiPolygon') {\n      return geometry.coordinates.map((polygon, index) => /*#__PURE__*/_jsxDEV(Polygon, {\n        positions: polygon.map(ring => ring.map(coord => [coord[1], coord[0]])),\n        color: randomColor(),\n        weight: 4\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 9\n      }, this));\n    } else {\n      console.error(\"Unsupported geometry type:\", geometry.type);\n      return null;\n    }\n  };\n  const randomColor = () => {\n    return `#${Math.floor(Math.random() * 5).toString(16)}`;\n  };\n  const calculateColor = value => {\n    const blue = 255 - Math.min(Math.max(parseInt(value), 0), 255);\n    const red = Math.min(Math.max(parseInt(value), 0), 255);\n    return `rgb(${red}, 0, ${blue})`;\n  };\n  useEffect(() => {\n    const fetchData = async () => {\n      const url = 'https://gateway.api.globalfishingwatch.org/v2/4wings/report';\n\n      // Calculate the dates for 7 days - 6 days ago\n      const today = new Date();\n      const firstdate = new Date(today);\n      firstdate.setDate(today.getDate() - 7);\n      const seconddate = new Date(today);\n      seconddate.setDate(today.getDate() - 6);\n      const formatDate = date => date.toISOString().split('T')[0];\n      const params = {\n        'spatial-resolution': 'high',\n        'temporal-resolution': 'hourly',\n        'group-by': 'mmsi',\n        'datasets[0]': 'public-global-fishing-effort:latest',\n        'date-range': `${formatDate(firstdate)},${formatDate(seconddate)}`,\n        'format': 'csv'\n      };\n      const headers = {\n        'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtpZEtleSJ9.eyJkYXRhIjp7Im5hbWUiOiJJbGxlZ2FsIEZpc2hpbmcgQm9hdCBBbmFseXNlciIsInVzZXJJZCI6MzE3NDcsImFwcGxpY2F0aW9uTmFtZSI6IklsbGVnYWwgRmlzaGluZyBCb2F0IEFuYWx5c2VyIiwiaWQiOjEzNDMsInR5cGUiOiJ1c2VyLWFwcGxpY2F0aW9uIn0sImlhdCI6MTcxMDMwNTM1NywiZXhwIjoyMDI1NjY1MzU3LCJhdWQiOiJnZnciLCJpc3MiOiJnZncifQ.hjAzx39Mt1wIZunhRN6LgJ386Z1rZwcoazHpSnoRYF_oESeoREelVFS22GaXfqeoaI4VaQ_qorf6uHJyUPR4m7Mm7KIl1N6AuVQ8VLcaCRxg0RDLGGCmkBXRv15vVqXkDikIsa9Y3ctslkW3s1AmhinDSZgDCIbDJDHG4-j-iUovroNTRy1YY_wMSfY2lBSqoJdcWxmS3uR8ao5Z7Ag6fwoI_FRXRW59wEghq06M3v5poREs0t8lXuM7yAByg3OYwwHnFU9pGTY2ofbd4stPOqADisqeTkCwG2n68H7kZgCliTX4UYWAgFZWObR_Xn3sC4ZqGI2Oo9Y43Kvn8YWCEqEH75_Ii_eOCX75S-bNKdKeYAuM2u8yHjYNTynAyi4DqNpuAvJo4YLy4PpIQPCNFyy7g72xFUiVoyH0WIXSWH3s9PD3cp_6fquJWmSsGp60LEu3HK7sepovQqn4Z5D9gtLra3UnQSMuzcM6eK-RaruHqb1syvHBOPHkKCghrJRX',\n        // Replace with your actual token\n        'Content-Type': 'application/json'\n      };\n      const data = {\n        \"region\": {\n          \"dataset\": \"public-eez-areas\",\n          \"id\": 8492\n        }\n      };\n      const maxRetries = 5;\n      const delay = ms => new Promise(resolve => setTimeout(resolve, ms));\n      for (let attempt = 0; attempt <= maxRetries; attempt++) {\n        try {\n          const response = await axios.post(url, data, {\n            params,\n            headers,\n            responseType: 'arraybuffer'\n          });\n          const zip = new JSZip();\n          const zipContent = await zip.loadAsync(response.data);\n          const newMarkers = [];\n          zipContent.forEach(async (relativePath, file) => {\n            if (file.name.endsWith('.csv')) {\n              const csvContent = await file.async('text');\n              Papa.parse(csvContent, {\n                complete: async function (results) {\n                  const data = results.data;\n                  for (let i = 1; i < data.length; i++) {\n                    const lat = parseFloat(data[i][0]);\n                    const lon = parseFloat(data[i][1]);\n                    const mmsi = data[i][3];\n                    if (lat && lon) {\n                      let flag = 'NaN';\n                      let shipname = 'Unidentified';\n                      let shipinit = 'Unidentified';\n                      let callsign = 'Empty';\n                      let geartype = 'Unknown';\n                      let title = `${flag}, ${shipname}, ${callsign}, ${geartype}`;\n                      let missingvalue = 0;\n                      if (mmsi) {\n                        try {\n                          const vesselInfoResponse = await axios.get(`https://gateway.api.globalfishingwatch.org/v3/vessels/search?query=${mmsi}&datasets[0]=public-global-vessel-identity:latest&includes[0]=MATCH_CRITERIA&includes[1]=OWNERSHIP&includes[2]=AUTHORIZATIONS`, {\n                            headers: {\n                              'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtpZEtleSJ9.eyJkYXRhIjp7Im5hbWUiOiJJbGxlZ2FsIEZpc2hpbmcgQm9hdCBBbmFseXNlciIsInVzZXJJZCI6MzE3NDcsImFwcGxpY2F0aW9uTmFtZSI6IklsbGVnYWwgRmlzaGluZyBCb2F0IEFuYWx5c2VyIiwiaWQiOjEzNDMsInR5cGUiOiJ1c2VyLWFwcGxpY2F0aW9uIn0sImlhdCI6MTcxMDMwNTM1NywiZXhwIjoyMDI1NjY1MzU3LCJhdWQiOiJnZnciLCJpc3MiOiJnZncifQ.hjAzx39Mt1wIZunhRN6LgJ386Z1rZwcoazHpSnoRYF_oESeoREelVFS22GaXfqeoaI4VaQ_qorf6uHJyUPR4m7Mm7KIl1N6AuVQ8VLcaCRxg0RDLGGCmkBXRv15vVqXkDikIsa9Y3ctslkW3s1AmhinDSZgDCIbDJDHG4-j-iUovroNTRy1YY_wMSfY2lBSqoJdcWxmS3uR8ao5Z7Ag6fwoI_FRXRW59wEghq06M3v5poREs0t8lXuM7yAByg3OYwwHnFU9pGTY2ofbd4stPOqADisqeTkCwG2n68H7kZgCliTX4UYWAgFZWObR_Xn3sC4ZqGI2Oo9Y43Kvn8YWCEqEH75_Ii_eOCX75S-bNKdKeYAuM2u8yHjYNTynAyi4DqNpuAvJo4YLy4PpIQPCNFyy7g72xFUiVoyH0WIXSWH3s9PD3cp_6fquJWmSsGp60LEu3HK7sepovQqn4Z5D9gtLra3UnQSMuzcM6eK-RaruHqb1syvHBOPHkKCghrJRX',\n                              // Replace with your actual token\n                              'Content-Type': 'application/json'\n                            }\n                          });\n                          const vesselInfo = vesselInfoResponse.data.entries[0];\n                          if (vesselInfo && vesselInfo.registryInfo && vesselInfo.registryInfo[0]) {\n                            var _vesselInfo$combinedS, _vesselInfo$combinedS2;\n                            flag = vesselInfo.registryInfo[0].flag || flag;\n                            shipname = vesselInfo.registryInfo[0].shipname || shipname;\n                            callsign = vesselInfo.registryInfo[0].callsign || callsign;\n                            geartype = ((_vesselInfo$combinedS = vesselInfo.combinedSourcesInfo[0]) === null || _vesselInfo$combinedS === void 0 ? void 0 : (_vesselInfo$combinedS2 = _vesselInfo$combinedS.geartypes[0]) === null || _vesselInfo$combinedS2 === void 0 ? void 0 : _vesselInfo$combinedS2.name) || geartype;\n                            // Handling the cases based on the available data\n                            if (flag === 'NaN') {\n                              if (shipname === 'Unidentified') {\n                                if (callsign === 'Empty') {\n                                  title = `${geartype}`;\n                                } else {\n                                  title = `${callsign}, ${geartype}`;\n                                }\n                              } else {\n                                title = `${shipname}, ${callsign}, ${geartype}`;\n                              }\n                            } else {\n                              title = `${flag}, ${shipname}, ${callsign}, ${geartype}`;\n                            }\n                          }\n                          if (shipname !== shipinit) {\n                            missingvalue += 1;\n                          }\n                        } catch (error) {\n                          console.error('Error fetching vessel information:', error);\n                          title = `${mmsi}`;\n                        }\n                      }\n                      let colorValue = 1;\n                      colorValue = colorValue + missingvalue * 255;\n                      const color = calculateColor(colorValue);\n                      newMarkers.push({\n                        lat,\n                        lon,\n                        title,\n                        color\n                      });\n                    }\n                  }\n                  setMarkers(newMarkers);\n                }\n              });\n            }\n          });\n          break; // Exit the retry loop if the request is successful\n        } catch (error) {\n          if (error.response && error.response.status === 429 && attempt < maxRetries) {\n            // If status code is 429, wait and retry\n            const waitTime = Math.pow(2, attempt) * 1000; // Exponential backoff\n            console.warn(`Rate limit exceeded. Retrying in ${waitTime / 1000} seconds...`);\n            await delay(waitTime);\n          } else if (error.response && error.response.status === 401) {\n            // Handle unauthorized error\n            console.error('Unauthorized: Please check your API token.');\n            break; // Stop retrying on unauthorized error\n          } else {\n            console.error('Error fetching and processing data', error);\n            break; // Exit the loop if another error occurs or max retries reached\n          }\n        }\n      }\n    };\n    fetchData();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"input-form\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Ship Watch\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 186,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      center: [-2.5, 117],\n      zoom: 5,\n      style: {\n        height: '100vh',\n        width: '100%'\n      },\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a> contributors\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 190,\n        columnNumber: 9\n      }, this), geoJsonData && geoJsonData.features && geoJsonData.features.map((feature, index) => /*#__PURE__*/_jsxDEV(React.Fragment, {\n        children: renderPolygons(feature.geometry)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this)), markers.map((marker, index) => /*#__PURE__*/_jsxDEV(CircleMarker, {\n        center: [marker.lat, marker.lon],\n        color: marker.color,\n        radius: 2,\n        children: /*#__PURE__*/_jsxDEV(Popup, {\n          children: marker.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 206,\n          columnNumber: 13\n        }, this)\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 200,\n        columnNumber: 11\n      }, this))]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 189,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 185,\n    columnNumber: 5\n  }, this);\n};\n_s(MapGet, \"zOjMgM2LyksQXZzZywr/6TI5Wn4=\");\n_c = MapGet;\nexport default MapGet;\nvar _c;\n$RefreshReg$(_c, \"MapGet\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","Polygon","CircleMarker","Popup","JSZip","Papa","axios","jsxDEV","_jsxDEV","MapGet","_s","geoJsonData","setGeoJsonData","markers","setMarkers","fetch","then","response","json","data","renderPolygons","geometry","type","positions","coordinates","map","ring","coord","color","randomColor","weight","fileName","_jsxFileName","lineNumber","columnNumber","polygon","index","console","error","Math","floor","random","toString","calculateColor","value","blue","min","max","parseInt","red","fetchData","url","today","Date","firstdate","setDate","getDate","seconddate","formatDate","date","toISOString","split","params","headers","maxRetries","delay","ms","Promise","resolve","setTimeout","attempt","post","responseType","zip","zipContent","loadAsync","newMarkers","forEach","relativePath","file","name","endsWith","csvContent","async","parse","complete","results","i","length","lat","parseFloat","lon","mmsi","flag","shipname","shipinit","callsign","geartype","title","missingvalue","vesselInfoResponse","get","vesselInfo","entries","registryInfo","_vesselInfo$combinedS","_vesselInfo$combinedS2","combinedSourcesInfo","geartypes","colorValue","push","status","waitTime","pow","warn","children","className","center","zoom","style","height","width","attribution","features","feature","Fragment","marker","radius","_c","$RefreshReg$"],"sources":["C:/Assignments/Binus/Software Engineering/aol2/Illegal-Maritime-Activities-System/frontend/src/components/MapGet.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, Polygon, CircleMarker, Popup } from 'react-leaflet';\r\nimport 'leaflet/dist/leaflet.css';\r\nimport JSZip from 'jszip';\r\nimport Papa from 'papaparse';\r\nimport axios from 'axios';\r\n\r\nconst MapGet = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [markers, setMarkers] = useState([]);\r\n\r\n  useEffect(() => {\r\n    fetch('/res/geometry.geojson')\r\n      .then((response) => response.json())\r\n      .then((data) => setGeoJsonData(data));\r\n  }, []);\r\n\r\n  const renderPolygons = (geometry) => {\r\n    if (geometry.type === 'Polygon') {\r\n      return (\r\n        <Polygon \r\n          positions={geometry.coordinates.map(ring => ring.map(coord => [coord[1], coord[0]]))}\r\n          color={randomColor()}\r\n          weight={4}\r\n        />\r\n      );\r\n    } else if (geometry.type === 'MultiPolygon') {\r\n      return geometry.coordinates.map((polygon, index) => (\r\n        <Polygon\r\n          key={index}\r\n          positions={polygon.map(ring => ring.map(coord => [coord[1], coord[0]]))}\r\n          color={randomColor()}\r\n          weight={4}\r\n        />\r\n      ));\r\n    } else {\r\n      console.error(\"Unsupported geometry type:\", geometry.type);\r\n      return null;\r\n    }\r\n  };\r\n\r\n  const randomColor = () => {\r\n    return `#${Math.floor(Math.random() * 5).toString(16)}`;\r\n  };\r\n\r\n  const calculateColor = (value) => {\r\n    const blue = 255 - Math.min(Math.max(parseInt(value), 0), 255);\r\n    const red = Math.min(Math.max(parseInt(value), 0), 255);\r\n    return `rgb(${red}, 0, ${blue})`;\r\n  };\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      const url = 'https://gateway.api.globalfishingwatch.org/v2/4wings/report';\r\n    \r\n      // Calculate the dates for 7 days - 6 days ago\r\n      const today = new Date();\r\n      const firstdate = new Date(today);\r\n      firstdate.setDate(today.getDate() - 7);\r\n      const seconddate = new Date(today);\r\n      seconddate.setDate(today.getDate() - 6);\r\n    \r\n      const formatDate = (date) => date.toISOString().split('T')[0];\r\n    \r\n      const params = {\r\n        'spatial-resolution': 'high',\r\n        'temporal-resolution': 'hourly',\r\n        'group-by': 'mmsi',\r\n        'datasets[0]': 'public-global-fishing-effort:latest',\r\n        'date-range': `${formatDate(firstdate)},${formatDate(seconddate)}`,\r\n        'format': 'csv'\r\n      };\r\n    \r\n      const headers = {\r\n        'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtpZEtleSJ9.eyJkYXRhIjp7Im5hbWUiOiJJbGxlZ2FsIEZpc2hpbmcgQm9hdCBBbmFseXNlciIsInVzZXJJZCI6MzE3NDcsImFwcGxpY2F0aW9uTmFtZSI6IklsbGVnYWwgRmlzaGluZyBCb2F0IEFuYWx5c2VyIiwiaWQiOjEzNDMsInR5cGUiOiJ1c2VyLWFwcGxpY2F0aW9uIn0sImlhdCI6MTcxMDMwNTM1NywiZXhwIjoyMDI1NjY1MzU3LCJhdWQiOiJnZnciLCJpc3MiOiJnZncifQ.hjAzx39Mt1wIZunhRN6LgJ386Z1rZwcoazHpSnoRYF_oESeoREelVFS22GaXfqeoaI4VaQ_qorf6uHJyUPR4m7Mm7KIl1N6AuVQ8VLcaCRxg0RDLGGCmkBXRv15vVqXkDikIsa9Y3ctslkW3s1AmhinDSZgDCIbDJDHG4-j-iUovroNTRy1YY_wMSfY2lBSqoJdcWxmS3uR8ao5Z7Ag6fwoI_FRXRW59wEghq06M3v5poREs0t8lXuM7yAByg3OYwwHnFU9pGTY2ofbd4stPOqADisqeTkCwG2n68H7kZgCliTX4UYWAgFZWObR_Xn3sC4ZqGI2Oo9Y43Kvn8YWCEqEH75_Ii_eOCX75S-bNKdKeYAuM2u8yHjYNTynAyi4DqNpuAvJo4YLy4PpIQPCNFyy7g72xFUiVoyH0WIXSWH3s9PD3cp_6fquJWmSsGp60LEu3HK7sepovQqn4Z5D9gtLra3UnQSMuzcM6eK-RaruHqb1syvHBOPHkKCghrJRX', // Replace with your actual token\r\n        'Content-Type': 'application/json'\r\n      };\r\n      const data = {\r\n        \"region\": {\r\n          \"dataset\": \"public-eez-areas\",\r\n          \"id\": 8492\r\n        }\r\n      };\r\n    \r\n      const maxRetries = 5;\r\n      const delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n    \r\n      for (let attempt = 0; attempt <= maxRetries; attempt++) {\r\n        try {\r\n          const response = await axios.post(url, data, { params, headers, responseType: 'arraybuffer' });\r\n          const zip = new JSZip();\r\n          const zipContent = await zip.loadAsync(response.data);\r\n    \r\n          const newMarkers = [];\r\n    \r\n          zipContent.forEach(async (relativePath, file) => {\r\n            if (file.name.endsWith('.csv')) {\r\n              const csvContent = await file.async('text');\r\n              Papa.parse(csvContent, {\r\n                complete: async function (results) {\r\n                  const data = results.data;\r\n                  for (let i = 1; i < data.length; i++) {\r\n                    const lat = parseFloat(data[i][0]);\r\n                    const lon = parseFloat(data[i][1]);\r\n                    const mmsi = data[i][3];\r\n                    if (lat && lon) {\r\n                      let flag = 'NaN';\r\n                      let shipname = 'Unidentified';\r\n                      let shipinit = 'Unidentified';\r\n                      let callsign = 'Empty';\r\n                      let geartype = 'Unknown';\r\n                      let title = `${flag}, ${shipname}, ${callsign}, ${geartype}`;\r\n                      let missingvalue = 0;\r\n                      if (mmsi) {\r\n                        try {\r\n                          const vesselInfoResponse = await axios.get(`https://gateway.api.globalfishingwatch.org/v3/vessels/search?query=${mmsi}&datasets[0]=public-global-vessel-identity:latest&includes[0]=MATCH_CRITERIA&includes[1]=OWNERSHIP&includes[2]=AUTHORIZATIONS`, {\r\n                            headers: {\r\n                              'Authorization': 'Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCIsImtpZCI6ImtpZEtleSJ9.eyJkYXRhIjp7Im5hbWUiOiJJbGxlZ2FsIEZpc2hpbmcgQm9hdCBBbmFseXNlciIsInVzZXJJZCI6MzE3NDcsImFwcGxpY2F0aW9uTmFtZSI6IklsbGVnYWwgRmlzaGluZyBCb2F0IEFuYWx5c2VyIiwiaWQiOjEzNDMsInR5cGUiOiJ1c2VyLWFwcGxpY2F0aW9uIn0sImlhdCI6MTcxMDMwNTM1NywiZXhwIjoyMDI1NjY1MzU3LCJhdWQiOiJnZnciLCJpc3MiOiJnZncifQ.hjAzx39Mt1wIZunhRN6LgJ386Z1rZwcoazHpSnoRYF_oESeoREelVFS22GaXfqeoaI4VaQ_qorf6uHJyUPR4m7Mm7KIl1N6AuVQ8VLcaCRxg0RDLGGCmkBXRv15vVqXkDikIsa9Y3ctslkW3s1AmhinDSZgDCIbDJDHG4-j-iUovroNTRy1YY_wMSfY2lBSqoJdcWxmS3uR8ao5Z7Ag6fwoI_FRXRW59wEghq06M3v5poREs0t8lXuM7yAByg3OYwwHnFU9pGTY2ofbd4stPOqADisqeTkCwG2n68H7kZgCliTX4UYWAgFZWObR_Xn3sC4ZqGI2Oo9Y43Kvn8YWCEqEH75_Ii_eOCX75S-bNKdKeYAuM2u8yHjYNTynAyi4DqNpuAvJo4YLy4PpIQPCNFyy7g72xFUiVoyH0WIXSWH3s9PD3cp_6fquJWmSsGp60LEu3HK7sepovQqn4Z5D9gtLra3UnQSMuzcM6eK-RaruHqb1syvHBOPHkKCghrJRX', // Replace with your actual token\r\n                              'Content-Type': 'application/json'\r\n                            }\r\n                          });\r\n                          const vesselInfo = vesselInfoResponse.data.entries[0];\r\n                          if (vesselInfo && vesselInfo.registryInfo && vesselInfo.registryInfo[0]) {\r\n                            flag = vesselInfo.registryInfo[0].flag || flag;\r\n                            shipname = vesselInfo.registryInfo[0].shipname || shipname;\r\n                            callsign = vesselInfo.registryInfo[0].callsign || callsign;\r\n                            geartype = vesselInfo.combinedSourcesInfo[0]?.geartypes[0]?.name || geartype;\r\n                            // Handling the cases based on the available data\r\n                            if (flag==='NaN') {\r\n                              if (shipname === 'Unidentified') {\r\n                                if (callsign === 'Empty') {\r\n                                  title = `${geartype}`;\r\n                                } else {\r\n                                  title = `${callsign}, ${geartype}`;\r\n                                }\r\n                              } else {\r\n                                title = `${shipname}, ${callsign}, ${geartype}`;\r\n                              }\r\n                            } else {\r\n                              title = `${flag}, ${shipname}, ${callsign}, ${geartype}`;\r\n                            }\r\n                          }\r\n                          if (shipname !== shipinit) {\r\n                            missingvalue+=1;\r\n                          }\r\n                        } catch (error) {\r\n                          console.error('Error fetching vessel information:', error);\r\n                          title = `${mmsi}`;\r\n                        }\r\n                      }\r\n                      let colorValue = 1;\r\n                      colorValue = colorValue + missingvalue*255;\r\n                      const color = calculateColor(colorValue);\r\n                        newMarkers.push({ lat, lon, title, color });\r\n                    }\r\n                  }\r\n                  setMarkers(newMarkers);\r\n                }\r\n              });\r\n            }\r\n          });\r\n          break; // Exit the retry loop if the request is successful\r\n        } catch (error) {\r\n          if (error.response && error.response.status === 429 && attempt < maxRetries) {\r\n            // If status code is 429, wait and retry\r\n            const waitTime = Math.pow(2, attempt) * 1000; // Exponential backoff\r\n            console.warn(`Rate limit exceeded. Retrying in ${waitTime / 1000} seconds...`);\r\n            await delay(waitTime);\r\n          } else if (error.response && error.response.status === 401) {\r\n            // Handle unauthorized error\r\n            console.error('Unauthorized: Please check your API token.');\r\n            break; // Stop retrying on unauthorized error\r\n          } else {\r\n            console.error('Error fetching and processing data', error);\r\n            break; // Exit the loop if another error occurs or max retries reached\r\n          }\r\n        }\r\n      }\r\n    };    \r\n\r\n    fetchData();\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"input-form\" >\r\n        <h1>Ship Watch</h1>\r\n      </div>\r\n      <MapContainer center={[-2.5, 117]} zoom={5} style={{ height: '100vh', width: '100%' }}>\r\n        <TileLayer\r\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a> contributors'\r\n        />\r\n        {geoJsonData && geoJsonData.features && geoJsonData.features.map((feature, index) => (\r\n          <React.Fragment key={index}>\r\n            {renderPolygons(feature.geometry)}\r\n          </React.Fragment>\r\n        ))}\r\n        {markers.map((marker, index) => (\r\n          <CircleMarker\r\n            key={index}\r\n            center={[marker.lat, marker.lon]}\r\n            color={marker.color}\r\n            radius={2}\r\n          >\r\n            <Popup>{marker.title}</Popup>\r\n          </CircleMarker>\r\n        ))}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MapGet;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}